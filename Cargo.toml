[package]
name = "rayon"
version = "1.8.1"
authors = ["Niko Matsakis <niko@alum.mit.edu>",
           "Josh Stone <cuviper@gmail.com>"]
description = "Simple work-stealing parallelism for Rust"
rust-version = "1.63"
edition = "2021"
license = "MIT OR Apache-2.0"
repository = "https://github.com/rayon-rs/rayon"
documentation = "https://docs.rs/rayon/"
readme = "README.md"
keywords = ["parallel", "thread", "concurrency", "join", "performance"]
categories = ["concurrency"]
exclude = ["/ci/*", "/scripts/*", "/.github/*"]

[workspace]
members = ["rayon-demo", "rayon-core"]
exclude = ["ci"]

[dependencies]
rayon-core = { version = "1.12.1", path = "rayon-core" }
wasm_sync = { version = "0.1.0", optional = true }

# This is a public dependency!
[dependencies.either]
version = "1.0"
default-features = false

[features]
# This feature switches to a spin-lock implementation on the browser's
# main thread to avoid the forbidden `atomics.wait`.
#
# Only useful on the `wasm32-unknown-unknown` target.
web_spin_lock = ["dep:wasm_sync", "rayon-core/web_spin_lock"]

[dev-dependencies]
rand = "0.8"
rand_xorshift = "0.3"

# Test dependencies for wasm32-unknown-unknown with wasm-bindgen.
[target.'cfg(all(target_arch = "wasm32", target_os = "unknown"))'.dev-dependencies]
getrandom = { version = "0.2", features = ["js"] }
wasm-bindgen-test = "0.3"
