name: CI
on: [merge_group, push]

jobs:

  check:
    name: Check (1.63.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.63.0
      - run: cp ci/compat-Cargo.lock ./Cargo.lock
      - run: cargo check --verbose --locked

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - run: cargo build --verbose
      - run: cargo test --verbose --package rayon
      - run: cargo test --verbose --package rayon-core
      - run: ./ci/highlander.sh

  # rayon-demo has huge dependencies, so limit its testing.
  # build on stable, test on nightly (because of #[bench])
  demo:
    name: Demo
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - run: cargo build --verbose --package rayon-demo
      - run: cargo test --verbose --package rayon-demo
        if: matrix.rust == 'nightly'

  i686:
    name: Test (ubuntu-latest, stable-i686)
    runs-on: ubuntu-latest
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable-i686-unknown-linux-gnu
      - run: cargo build --verbose
      - run: cargo test --verbose --package rayon
      - run: cargo test --verbose --package rayon-core

  # wasm32-unknown-unknown builds, and even has the runtime fallback for
  # unsupported threading, but we don't have an environment to execute in.
  # wasm32-wasi can test the fallback by running in wasmtime.
  wasm:
    name: WebAssembly (wasm32-unknown-unknown)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            rustflags: ''
          - rust: nightly
            rustflags: '-C target-feature=+atomics,+bulk-memory'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: wasm32-unknown-unknown
      - run: cargo check --verbose --target wasm32-unknown-unknown
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

  # wasm32-wasi can test the fallback by running in wasmtime.
  wasi:
    name: WebAssembly (WASI)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [wasm32-wasi, wasm32-wasi-preview1-threads]
    steps:
      - uses: actions/checkout@v3
      - run: curl https://wasmtime.dev/install.sh -sSf | bash
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Set default target and runner
        run: |
          cat << EOF > ~/.cargo/config.toml
          [build]
          target = "${{ matrix.target }}"

          [target.${{ matrix.target }}]
          runner = "/home/runner/.wasmtime/bin/wasmtime"
          EOF
      - run: cargo test --verbose --package rayon
      - run: cargo test --verbose --package rayon-core

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.72.1
        with:
          components: rustfmt
      - run: cargo fmt --all --check

  done:
    name: Complete
    runs-on: ubuntu-latest
    needs: [check, test, demo, i686, wasm, fmt]
    steps:
      - run: exit 0
